{"ast":null,"code":"var _jsxFileName = \"/home/viresh/Documents/repo/ulog_parser_webapp/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedContent, setSelectedContent] = useState('');\n  const [results, setResults] = useState({\n    battery_status_dict: null,\n    gps_status_dict: null,\n    accel_status_dict: null\n  });\n  const [customerLog, setCustomerLog] = useState(null);\n  const [fileName, setFileName] = useState(''); // New state variable to store the filename\n\n  const handleFileUpload = async event => {\n    if (event.target.files && event.target.files.length > 0) {\n      // Check if any file is selected\n      const file = event.target.files[0];\n      setFileName(file.name); // Update the state with the file name\n      const formData = new FormData();\n      formData.append('customerLog', file);\n      try {\n        const response = await fetch('http://localhost:5000/upload', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) throw new Error('Network response was not ok.');\n        const data = await response.json();\n        setResults(data);\n      } catch (error) {\n        console.error('Error during fetch:', error);\n      }\n    } else {\n      // Handle the case where no file is selected\n    }\n  };\n  const handleButtonClick = contentKey => {\n    // Access the 'value' key within the results[contentKey] object\n    const contentValue = results[contentKey]['value'];\n    // Update the state with the content of the 'value' key\n    setSelectedContent(contentValue);\n  };\n  const determineTabColor = key => {\n    // Access the 'status' key within the results[key] object\n    const status = results[key]['status'];\n    // Determine the color based on the value of the 'status' key\n    if (status === true) {\n      return \"green\";\n    } else if (status === false) {\n      return \"red\";\n    } else {\n      return \"grey\"; // Default color if status is undefined or not a boolean\n    }\n  };\n\n  // Dynamically generate buttons based on results keys\n  const tabs = Object.keys(results).filter(key => results[key] !== null).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleButtonClick(key),\n    style: {\n      backgroundColor: determineTabColor(key)\n    },\n    children: key.replace('_', ' ')\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this));\n\n  // Display the selected content\n  const displayContent = selectedContent ? Object.entries(selectedContent).map(([key, value]) => `${key}: ${value}`).join('\\n') : '';\n  print(\"type of display content: \", type(displayContent));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => document.getElementById('fileInput').click(),\n        children: \"Upload and Process ULog File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        onChange: handleFileUpload,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), fileName &&\n      /*#__PURE__*/\n      // This line checks if fileName is not empty\n      _jsxDEV(\"span\", {\n        className: \"filename-display\",\n        children: [\"Uploaded File: \", fileName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: tabs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), selectedContent &&\n    /*#__PURE__*/\n    // This line checks if selectedContent is not empty\n    _jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: displayContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xNa+VZbWGmegFL1zAex6dS2XOMU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedContent","setSelectedContent","results","setResults","battery_status_dict","gps_status_dict","accel_status_dict","customerLog","setCustomerLog","fileName","setFileName","handleFileUpload","event","target","files","length","file","name","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","error","console","handleButtonClick","contentKey","contentValue","determineTabColor","key","status","tabs","Object","keys","filter","map","onClick","style","backgroundColor","children","replace","_jsxFileName","lineNumber","columnNumber","displayContent","entries","value","join","print","type","className","document","getElementById","click","id","onChange","display","_c","$RefreshReg$"],"sources":["/home/viresh/Documents/repo/ulog_parser_webapp/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [selectedContent, setSelectedContent] = useState('');\n  const [results, setResults] = useState({\n    battery_status_dict: null,\n    gps_status_dict: null,\n    accel_status_dict: null,\n  });\n  const [customerLog, setCustomerLog] = useState(null);\n  const [fileName, setFileName] = useState(''); // New state variable to store the filename\n\n  const handleFileUpload = async (event) => {\n    if (event.target.files && event.target.files.length > 0) { // Check if any file is selected\n      const file = event.target.files[0];\n      setFileName(file.name); // Update the state with the file name\n      const formData = new FormData();\n      formData.append('customerLog', file);\n\n      try {\n        const response = await fetch('http://localhost:5000/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) throw new Error('Network response was not ok.');\n\n        const data = await response.json();\n        setResults(data);\n      } catch (error) {\n        console.error('Error during fetch:', error);\n      }\n    } else {\n      // Handle the case where no file is selected\n    }\n  };\n\n  const handleButtonClick = (contentKey) => {\n    // Access the 'value' key within the results[contentKey] object\n    const contentValue = results[contentKey]['value'];\n    // Update the state with the content of the 'value' key\n    setSelectedContent(contentValue);\n  };\n\n  const determineTabColor = (key) => {\n    // Access the 'status' key within the results[key] object\n    const status = results[key]['status'];\n    // Determine the color based on the value of the 'status' key\n    if (status === true) {\n      return \"green\";\n    } else if (status === false) {\n      return \"red\";\n    } else {\n      return \"grey\"; // Default color if status is undefined or not a boolean\n    }\n  };\n\n\n  // Dynamically generate buttons based on results keys\n  const tabs = Object.keys(results).filter(key => results[key] !== null).map((key) => (\n    <button key={key} onClick={() => handleButtonClick(key)} style={{ backgroundColor: determineTabColor(key) }}>\n      {key.replace('_', ' ')}\n    </button>\n  ));\n\n  // Display the selected content\n  const displayContent = selectedContent ? Object.entries(selectedContent).map(([key, value]) => `${key}: ${value}`).join('\\n') : '';\n  print(\"type of display content: \", type(displayContent))\n  return (\n    <div className=\"App\">\n      <div className=\"top-section\">\n        <button onClick={() => document.getElementById('fileInput').click()}>Upload and Process ULog File</button>\n        <input type=\"file\" id=\"fileInput\" onChange={handleFileUpload} style={{display: 'none'}} />\n        {fileName && ( // This line checks if fileName is not empty\n          <span className=\"filename-display\">Uploaded File: {fileName}</span>\n        )}\n      </div>\n      <div className=\"sidebar\">\n        {tabs}\n      </div>\n      {selectedContent && ( // This line checks if selectedContent is not empty\n        <div className=\"content\">\n          <pre>{displayContent}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}