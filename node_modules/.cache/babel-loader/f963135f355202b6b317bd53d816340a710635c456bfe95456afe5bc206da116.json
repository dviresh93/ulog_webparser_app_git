{"ast":null,"code":"var _jsxFileName = \"/home/viresh/Documents/repo/ulog_parser_webapp/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedContent, setSelectedContent] = useState('');\n  const [results, setResults] = useState({});\n  const [customerLog, setCustomerLog] = useState(null);\n  const handleFileUpload = event => {\n    setCustomerLog(event.target.files[0]);\n  };\n\n  // Simulate fetching results after file upload\n  const fetchResults = async () => {\n    // Placeholder for actual fetch call\n    // Assume results are fetched and set here\n    setResults({\n      output1: {\n        status: true,\n        details: \"Details for Output 1\"\n      },\n      output2: {\n        status: false,\n        details: \"Details for Output 2\"\n      }\n      // Add more outputs as needed\n    });\n  };\n\n  const handleButtonClick = contentKey => {\n    setSelectedContent(contentKey);\n  };\n\n  // Dynamically generate buttons based on results\n  const buttons = Object.keys(results).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleButtonClick(key),\n    children: key\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchResults,\n        children: \"Upload and Process ULog File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: buttons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: selectedContent && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: JSON.stringify(results[selectedContent])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mxs2P08K4LNtWkVSuCLgbB0JwfY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedContent","setSelectedContent","results","setResults","customerLog","setCustomerLog","handleFileUpload","event","target","files","fetchResults","output1","status","details","output2","handleButtonClick","contentKey","buttons","Object","keys","map","key","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/viresh/Documents/repo/ulog_parser_webapp/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [selectedContent, setSelectedContent] = useState('');\n  const [results, setResults] = useState({});\n  const [customerLog, setCustomerLog] = useState(null);\n\n  const handleFileUpload = (event) => {\n    setCustomerLog(event.target.files[0]);\n  };\n\n  // Simulate fetching results after file upload\n  const fetchResults = async () => {\n    // Placeholder for actual fetch call\n    // Assume results are fetched and set here\n    setResults({\n      output1: { status: true, details: \"Details for Output 1\" },\n      output2: { status: false, details: \"Details for Output 2\" },\n      // Add more outputs as needed\n    });\n  };\n\n  const handleButtonClick = (contentKey) => {\n    setSelectedContent(contentKey);\n  };\n\n  // Dynamically generate buttons based on results\n  const buttons = Object.keys(results).map((key) => (\n    <button key={key} onClick={() => handleButtonClick(key)}>\n      {key}\n    </button>\n  ));\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-section\">\n        <input type=\"file\" onChange={handleFileUpload} />\n        <button onClick={fetchResults}>Upload and Process ULog File</button>\n      </div>\n      <div className=\"sidebar\">\n        {buttons}\n      </div>\n      <div className=\"content\">\n        {selectedContent && <div>{JSON.stringify(results[selectedContent])}</div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMW,gBAAgB,GAAIC,KAAK,IAAK;IAClCF,cAAc,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACA;IACAP,UAAU,CAAC;MACTQ,OAAO,EAAE;QAAEC,MAAM,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAuB,CAAC;MAC1DC,OAAO,EAAE;QAAEF,MAAM,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAuB;MAC1D;IACF,CAAC,CAAC;EACJ,CAAC;;EAED,MAAME,iBAAiB,GAAIC,UAAU,IAAK;IACxCf,kBAAkB,CAACe,UAAU,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACjB,OAAO,CAAC,CAACkB,GAAG,CAAEC,GAAG,iBAC3CxB,OAAA;IAAkByB,OAAO,EAAEA,CAAA,KAAMP,iBAAiB,CAACM,GAAG,CAAE;IAAAE,QAAA,EACrDF;EAAG,GADOA,GAAG;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAER,CACT,CAAC;EAEF,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClB1B,OAAA;MAAK+B,SAAS,EAAC,aAAa;MAAAL,QAAA,gBAC1B1B,OAAA;QAAOgC,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAExB;MAAiB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjD9B,OAAA;QAAQyB,OAAO,EAAEZ,YAAa;QAAAa,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eACN9B,OAAA;MAAK+B,SAAS,EAAC,SAAS;MAAAL,QAAA,EACrBN;IAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACN9B,OAAA;MAAK+B,SAAS,EAAC,SAAS;MAAAL,QAAA,EACrBvB,eAAe,iBAAIH,OAAA;QAAA0B,QAAA,EAAMQ,IAAI,CAACC,SAAS,CAAC9B,OAAO,CAACF,eAAe,CAAC;MAAC;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CA7CQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}